"""
Representa um agendamento de um paciente
"""
type Agendamento{
    id: ID,
    pacienteId: ID,
    medicoId: ID,
    dataAgendamento: String,
    tipoAtendimento: TipoAtendimento,
    status: Status,
    observacoes: String,
    dataCriacao: String
}

"""
Dados necessários para criar ou atualizar um agendamento
"""
input AgendamentoRequest{
    pacienteId: ID!,
    medicoId: ID!,
    dataAgendamento: String!,
    tipoAtendimento: TipoAtendimento!,
    status: Status!,
    observacoes: String
}

"""
Filtro para buscar agendamentos
"""
input AgendamentoFilter {
    pacienteId: ID
    medicoId: ID
    status: Status
    tipoAtendimento: TipoAtendimento
    dataAgendamento: String
}

"""
Tipos de atendimento possíveis
"""
enum TipoAtendimento{
    CONSULTA,
    EXAME,
    RETORNO,
    CIRURGIA
}

"""
Status possíveis de um agendamento
"""
enum Status{
    AGENDADO,
    CONFIRMADO,
    CANCELADO,
    REALIZADO,
    REAGENDADO,
    NAO_COMPARECEU
}


"""
Consultas disponíveis para agendamentos
"""
type Query {
    findAgendamento(filter: AgendamentoFilter): [Agendamento]
}

"""
Mutations disponíveis para agendamentos
"""
type Mutation{
    createAgendamento(request: AgendamentoRequest!): Agendamento
    updateAgendamento(id: ID!, request: AgendamentoRequest!): Agendamento
    deleteAgendamento(id: ID!): Boolean
}